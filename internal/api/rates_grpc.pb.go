// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: rates.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceGarantexClient is the client API for APIServiceGarantex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceGarantexClient interface {
	GetRates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRatesResponse, error)
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type aPIServiceGarantexClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceGarantexClient(cc grpc.ClientConnInterface) APIServiceGarantexClient {
	return &aPIServiceGarantexClient{cc}
}

func (c *aPIServiceGarantexClient) GetRates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRatesResponse, error) {
	out := new(GetRatesResponse)
	err := c.cc.Invoke(ctx, "/api.APIServiceGarantex/GetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceGarantexClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/api.APIServiceGarantex/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceGarantexServer is the server API for APIServiceGarantex service.
// All implementations must embed UnimplementedAPIServiceGarantexServer
// for forward compatibility
type APIServiceGarantexServer interface {
	GetRates(context.Context, *emptypb.Empty) (*GetRatesResponse, error)
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedAPIServiceGarantexServer()
}

// UnimplementedAPIServiceGarantexServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceGarantexServer struct {
}

func (UnimplementedAPIServiceGarantexServer) GetRates(context.Context, *emptypb.Empty) (*GetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedAPIServiceGarantexServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAPIServiceGarantexServer) mustEmbedUnimplementedAPIServiceGarantexServer() {}

// UnsafeAPIServiceGarantexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceGarantexServer will
// result in compilation errors.
type UnsafeAPIServiceGarantexServer interface {
	mustEmbedUnimplementedAPIServiceGarantexServer()
}

func RegisterAPIServiceGarantexServer(s grpc.ServiceRegistrar, srv APIServiceGarantexServer) {
	s.RegisterService(&APIServiceGarantex_ServiceDesc, srv)
}

func _APIServiceGarantex_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceGarantexServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIServiceGarantex/GetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceGarantexServer).GetRates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIServiceGarantex_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceGarantexServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIServiceGarantex/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceGarantexServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// APIServiceGarantex_ServiceDesc is the grpc.ServiceDesc for APIServiceGarantex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIServiceGarantex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.APIServiceGarantex",
	HandlerType: (*APIServiceGarantexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _APIServiceGarantex_GetRates_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _APIServiceGarantex_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rates.proto",
}
